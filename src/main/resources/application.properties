spring.application.name=kandu
# ===================================================================
# SPRING BOOT DATASOURCE (H2 - Em memória para desenvolvimento/testes)
# ===================================================================
spring.datasource.url=jdbc:h2:mem:kandudb;DB_CLOSE_DELAY=-1;DB_CLOSE_ON_EXIT=FALSE
# Para H2 persistido em arquivo, use a linha abaixo e comente a de cima:
# spring.datasource.url=jdbc:h2:file:./kandudb_data/kandudb;DB_CLOSE_ON_EXIT=FALSE
spring.datasource.driverClassName=org.h2.Driver
spring.datasource.username=sa
# Senha é opcional para H2 em memória se não definida
spring.datasource.password=password

# H2 Console (para visualizar o banco H2 no navegador durante o desenvolvimento)
spring.h2.console.enabled=true
spring.h2.console.path=/h2-console
spring.h2.console.settings.trace=false
# Mantenha false por segurança em ambientes acessíveis, true apenas para debug local se necessário.
spring.h2.console.settings.web-allow-others=false

# ===================================================================
# JPA / HIBERNATE PROPERTIES (Com H2)
# ===================================================================
spring.jpa.database-platform=org.hibernate.dialect.H2Dialect

# Opções para spring.jpa.hibernate.ddl-auto:
# none: não faz nada (usar em produção com migrações de banco como Flyway/Liquibase)
# validate: valida se o schema do banco corresponde às entidades
# update: atualiza o schema se necessário (bom para desenvolvimento, mas use com cautela)
# create: cria o schema ao iniciar e não apaga ao finalizar (útil em alguns cenários de dev)
# create-drop: cria o schema ao iniciar e apaga ao finalizar (bom para testes e dev inicial)
spring.jpa.hibernate.ddl-auto=update

# Mostra as queries SQL geradas pelo Hibernate no console
spring.jpa.show-sql=true
# Formata o SQL exibido
spring.jpa.properties.hibernate.format_sql=true
# Adiciona comentários ao SQL gerado
spring.jpa.properties.hibernate.use_sql_comments=true

# ===================================================================
# JWT PROPERTIES
# ===================================================================
# ATENÇÃO: Gere uma chave secreta FORTE e aleatória para produção. Não use esta chave de exemplo!
# Você pode usar um gerador online ou um script para criar uma string Base64 longa e segura.
# Exemplo de como gerar no Linux/macOS: openssl rand -base64 32
kandu.jwt.secret=MinhaChaveSecretaSuperSeguraParaKanduAppQueDeveSerMuitoLongaEComplexaEmBase64
# Tempo de expiração em milissegundos (ex: 1 hora = 3600000)
kandu.jwt.expiration-ms=3600000
# kandu.jwt.expiration-ms=86400000 # Exemplo: 24 horas


# ===================================================================
# SPRING BOOT DATASOURCE (PostgreSQL - Para produção ou desenvolvimento avançado)
# Descomente e ajuste estas linhas quando for usar PostgreSQL
# ===================================================================
#spring.datasource.url=jdbc:postgresql://localhost:5432/kandu_db # Ajuste host, porta e nome do banco
#spring.datasource.username=kandu_user # Ajuste o usuário do banco
#spring.datasource.password=kandu_password # Ajuste a senha
#spring.datasource.driverClassName=org.postgresql.Driver

# ===================================================================
# JPA / HIBERNATE PROPERTIES (Com PostgreSQL)
# Descomente quando for usar PostgreSQL
# ===================================================================
#spring.jpa.database-platform=org.hibernate.dialect.PostgreSQLDialect
#spring.jpa.hibernate.ddl-auto=validate # Em produção, use 'validate' ou 'none' com migrações
